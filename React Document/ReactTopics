Reference:
https://github.com/RolandGuijt/ps-react-fundamentals

#####Spread attribute: passes two props to the component
const props = {a: 1 , b: 2};
const element = <Sum {...props}/>; //passing two props

#####STATES:
const [houses, setHouses] = useState(houseArray;)

const addHouse = () => {
  setHouses([
    ...houses, 
    {
      id: 3,
      address: "Lewisville TX"
    }
  ]);
};

<button onClick={addHouse}>

#####Calling setFunctiion(State) in child components
//app.js
const[selectedHouse, setSelectedHouse] = useState();
{seletedHouse ? (
  <House house={selectedHouse}/>
) : (
  <HouseList selectedHouse={setSelectedHouse}/>
)
}

.....child component HouseRow.....
<tr onClick={() => selectHouse(house)}>

#####Create wrapper function: to give component full control to its state
//app.js
const setSelectedHouseWrapper = useCallback((house) => {
  setSelectedHouse(house);
}, []);

.....
<HouseList selectedHouse={setSelectedHouseWrapper}/>


####Custom Hook
- Its a function can take any parameter and return thing u want
- When state change returns from hook the component using hooks re-renders
- Seperation of concern/ reuse the hooks

###Context: For global state to the all the child component
const context = React.createContext("default value");    //declare outside of the component and need to be exported
<context.Provider value="some value">
  //children
</context.Provider>

.....
const value = useContext(context);






